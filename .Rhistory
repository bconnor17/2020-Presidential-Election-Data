Changepoint*fMonth,
data = spending2)
#stargazer(model6, type = "text")
summary(model6)
model5 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3),
data = spending2)
#stargazer(model5, type = "text")
summary(model5)
forecast.m5 <-exp(predict(model5,newdata=spending.test.train))
variance.m5 <- forecast.m5 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m5, variance.m5)
forecast.table.5 <- spending.test.train %>%
select(1,2,4,21, 22) %>%
rename("Actual Spending" = Spending,
"Model 5 Forecast" = forecast.m5,
"Difference" = variance.m5)
forecast.table.5 <- forecast.table.5[2:13,]
pander(forecast.table.5)
model6 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) + I(Time^4) + I(Time^5) +
+ I(Time^6) + I(Time^7) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3) +  Changepoint*I(Time^4) +  Changepoint*I(Time^5),
data = spending2)
#stargazer(model6, type = "text")
summary(model6)
forecast.m6 <-exp(predict(model6,newdata=spending.test.train))
variance.m6 <- forecast.m6 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m6, variance.m6)
spending.test.train <- spending[300:312,]
forecast<-exp(predict(model3,newdata=spending.test.train))
variance <- forecast - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast, variance)
forecast.table.3 <- spending.test.train %>%
select(1,2,4,13,14) %>%
rename("Actual Spending" = Spending,
"Forecasted Spending" = forecast,
"Difference" = variance)
forecast.table.3 <- forecast.table.3[2:13,]
pander(forecast.table.3)
Month <- c(1:12)
plot(x = Month, y = forecast.table.3$`Forecasted Spending`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.3$`Actual Spending`, col = "black", type = "b")
mse_model3 <- mean((forecast.table.3$Difference)^2)
mse_model3
model4 <- lm(dlogSpending ~ fMonth + c348 + s348 + c432 + s432, data = spending2)
#stargazer(model4, type = "text")
summary(model4)
priorLogsales <- c(0,rep(0,length(spending.test.train$Spending)-1))
priorLogsales[2] <- spending.test.train$logSpending[1]
for(i in 3:length(spending.test.train$Spending)){
i1<-i-1
priorLogsales[i]<- spending.test.train$logSpending[i1]
}
spending.test.train <- data.frame(spending.test.train, priorLogsales)
forecast.m4 <-predict(model4,newdata=spending.test.train)
spending.test.train <- data.frame(spending.test.train, forecast.m4)
spending.test.train <- spending.test.train %>%
mutate(model4.spending.f = exp(priorLogsales + forecast.m4),
model4.variance = model4.spending.f - Spending)
forecast.table.4 <- spending.test.train %>%
select(1,2,4,13,17,14,18) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance)
forecast.table.4 <- forecast.table.4[2:13,]
pander(forecast.table.4)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.4$`Actual Spending`, col = "black", type = "b")
lines(forecast.table.4$`Model 4 Forecast`, col = "blue", type = "b")
mse_model4 <- mean((forecast.table.4$`Model 4 F vs. A`)^2)
mse_model4
model5 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3),
data = spending2)
#stargazer(model5, type = "text")
summary(model5)
forecast.m5 <-exp(predict(model5,newdata=spending.test.train))
variance.m5 <- forecast.m5 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m5, variance.m5)
forecast.table.5 <- spending.test.train %>%
select(1,2,4,21, 22) %>%
rename("Actual Spending" = Spending,
"Model 5 Forecast" = forecast.m5,
"Difference" = variance.m5)
View(spending.test.train)
spending.test.train <- spending[300:312,]
forecast<-exp(predict(model3,newdata=spending.test.train))
variance <- forecast - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast, variance)
forecast.table.3 <- spending.test.train %>%
select(1,2,4,13,14) %>%
rename("Actual Spending" = Spending,
"Forecasted Spending" = forecast,
"Difference" = variance)
forecast.table.3 <- forecast.table.3[2:13,]
pander(forecast.table.3)
Month <- c(1:12)
plot(x = Month, y = forecast.table.3$`Forecasted Spending`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.3$`Actual Spending`, col = "black", type = "b")
mse_model3 <- mean((forecast.table.3$Difference)^2)
mse_model3
model4 <- lm(dlogSpending ~ fMonth + c348 + s348 + c432 + s432, data = spending2)
#stargazer(model4, type = "text")
summary(model4)
b1<-coef(model4)[1]
b2<-coef(model4)[2:12]+b1
b3<-c(b1,b2)
x<-b3-mean(b3)
s12<-0
for(i in 2:12){
xsub<-x[i:12]
s12<-s12+sum(xsub)
}
s12<-s12/12
s<-c(rep(0,times=12))
s[12]<-s12
for(i in 1:11){
xsub<-x[1:i]
s[i]<-s[12]+sum(xsub)
}
model4seasonal<-exp(s)
model1seasonal<-exp(seas)
delta <- model4seasonal - model1seasonal
#Checking to make sure the model 5 seasonal indices multiply to 1
prod(model4seasonal)
options(digits = 4)
comptable1 <- data.frame(model1seasonal,model4seasonal, delta)
plot(x = Month, y = comptable1$model1seasonal, ylab = "Seasonal Index", main = "Seasonal Indices, Model 1 (red) vs. Model 4 (black)", col = "red", type = "b")
lines(comptable1$model4seasonal, col = "black", type = "b")
pander(comptable1)
qqnorm(resid(model4))
qqline(resid(model4))
plot(ts(resid(model4), start = c(1993, 1), freq = 12), xlab = "time", ylab = "residuals", main = "Residuals of Model 4")
acf(ts(resid(model4)))
spectrum(resid(model4), span = 8)
priorLogsales <- c(0,rep(0,length(spending.test.train$Spending)-1))
priorLogsales[2] <- spending.test.train$logSpending[1]
for(i in 3:length(spending.test.train$Spending)){
i1<-i-1
priorLogsales[i]<- spending.test.train$logSpending[i1]
}
spending.test.train <- data.frame(spending.test.train, priorLogsales)
forecast.m4 <-predict(model4,newdata=spending.test.train)
spending.test.train <- data.frame(spending.test.train, forecast.m4)
spending.test.train <- spending.test.train %>%
mutate(model4.spending.f = exp(priorLogsales + forecast.m4),
model4.variance = model4.spending.f - Spending)
forecast.table.4 <- spending.test.train %>%
select(1,2,4,13,17,14,18) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance)
forecast.table.4 <- forecast.table.4[2:13,]
pander(forecast.table.4)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.4$`Actual Spending`, col = "black", type = "b")
lines(forecast.table.4$`Model 4 Forecast`, col = "blue", type = "b")
mse_model4 <- mean((forecast.table.4$`Model 4 F vs. A`)^2)
mse_model4
model5 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3),
data = spending2)
#stargazer(model5, type = "text")
summary(model5)
forecast.m5 <-exp(predict(model5,newdata=spending.test.train))
variance.m5 <- forecast.m5 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m5, variance.m5)
forecast.table.5 <- spending.test.train %>%
select(1,2,4,19,20) %>%
rename("Actual Spending" = Spending,
"Model 5 Forecast" = forecast.m5,
"Difference" = variance.m5)
forecast.table.5 <- forecast.table.5[2:13,]
pander(forecast.table.5)
model6 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) + I(Time^4) + I(Time^5) +
+ I(Time^6) + I(Time^7) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3) +  Changepoint*I(Time^4) +  Changepoint*I(Time^5),
data = spending2)
#stargazer(model6, type = "text")
summary(model6)
forecast.m6 <-exp(predict(model6,newdata=spending.test.train))
variance.m6 <- forecast.m6 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m6, variance.m6)
forecast.table.4 <- spending.test.train %>%
select(1,2,4,13,17,19, 21, 14,18, 20, 22) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 5 Forecast" = forecast.m5,
"Model 6 Forecast" = forecast.m6,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance,
"Model 5 F vs. A" = variance.m5,
"Model 6 F vs. A" = variance.m6)
forecast.table.6 <- spending.test.train %>%
select(1,2,4,13,17,19, 21, 14,18, 20, 22) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 5 Forecast" = forecast.m5,
"Model 6 Forecast" = forecast.m6,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance,
"Model 5 F vs. A" = variance.m5,
"Model 6 F vs. A" = variance.m6)
View(forecast.table.6)
forecast.m6 <-exp(predict(model6,newdata=spending.test.train))
variance.m6 <- forecast.m6 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m6, variance.m6)
forecast.table.6 <- spending.test.train %>%
select(1,2,4,13,17,19, 21, 14,18, 20, 22) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 5 Forecast" = forecast.m5,
"Model 6 Forecast" = forecast.m6,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance,
"Model 5 F vs. A" = variance.m5,
"Model 6 F vs. A" = variance.m6)
forecast.table.6 <- forecast.table.6[2:13,]
pander(forecast.table.6)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
forecast.table.6 <- forecast.table.6[2:13,]
pander(forecast.table.6)
spending.test.train <- spending[300:312,]
forecast<-exp(predict(model3,newdata=spending.test.train))
variance <- forecast - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast, variance)
forecast.table.3 <- spending.test.train %>%
select(1,2,4,13,14) %>%
rename("Actual Spending" = Spending,
"Forecasted Spending" = forecast,
"Difference" = variance)
forecast.table.3 <- forecast.table.3[2:13,]
pander(forecast.table.3)
Month <- c(1:12)
plot(x = Month, y = forecast.table.3$`Forecasted Spending`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.3$`Actual Spending`, col = "black", type = "b")
mse_model3 <- mean((forecast.table.3$Difference)^2)
mse_model3
model4 <- lm(dlogSpending ~ fMonth + c348 + s348 + c432 + s432, data = spending2)
#stargazer(model4, type = "text")
summary(model4)
b1<-coef(model4)[1]
b2<-coef(model4)[2:12]+b1
b3<-c(b1,b2)
x<-b3-mean(b3)
s12<-0
for(i in 2:12){
xsub<-x[i:12]
s12<-s12+sum(xsub)
}
s12<-s12/12
s<-c(rep(0,times=12))
s[12]<-s12
for(i in 1:11){
xsub<-x[1:i]
s[i]<-s[12]+sum(xsub)
}
model4seasonal<-exp(s)
model1seasonal<-exp(seas)
delta <- model4seasonal - model1seasonal
#Checking to make sure the model 5 seasonal indices multiply to 1
prod(model4seasonal)
options(digits = 4)
comptable1 <- data.frame(model1seasonal,model4seasonal, delta)
plot(x = Month, y = comptable1$model1seasonal, ylab = "Seasonal Index", main = "Seasonal Indices, Model 1 (red) vs. Model 4 (black)", col = "red", type = "b")
lines(comptable1$model4seasonal, col = "black", type = "b")
pander(comptable1)
priorLogsales <- c(0,rep(0,length(spending.test.train$Spending)-1))
priorLogsales[2] <- spending.test.train$logSpending[1]
for(i in 3:length(spending.test.train$Spending)){
i1<-i-1
priorLogsales[i]<- spending.test.train$logSpending[i1]
}
spending.test.train <- data.frame(spending.test.train, priorLogsales)
forecast.m4 <-predict(model4,newdata=spending.test.train)
spending.test.train <- data.frame(spending.test.train, forecast.m4)
spending.test.train <- spending.test.train %>%
mutate(model4.spending.f = exp(priorLogsales + forecast.m4),
model4.variance = model4.spending.f - Spending)
forecast.table.4 <- spending.test.train %>%
select(1,2,4,13,17,14,18) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance)
forecast.table.4 <- forecast.table.4[2:13,]
pander(forecast.table.4)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.4$`Actual Spending`, col = "black", type = "b")
lines(forecast.table.4$`Model 4 Forecast`, col = "blue", type = "b")
mse_model4 <- mean((forecast.table.4$`Model 4 F vs. A`)^2)
mse_model4
model5 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3),
data = spending2)
#stargazer(model5, type = "text")
summary(model5)
forecast.m5 <-exp(predict(model5,newdata=spending.test.train))
variance.m5 <- forecast.m5 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m5, variance.m5)
forecast.table.5 <- spending.test.train %>%
select(1,2,4,19,20) %>%
rename("Actual Spending" = Spending,
"Model 5 Forecast" = forecast.m5,
"Difference" = variance.m5)
forecast.table.5 <- forecast.table.5[2:13,]
pander(forecast.table.5)
model6 <- lm(logSpending ~ Time + I(Time^2) + I(Time^3) + I(Time^4) + I(Time^5) +
+ I(Time^6) + I(Time^7) +
fMonth + Changepoint + Changepoint*Time + Changepoint*I(Time^2) +
Changepoint*I(Time^3) +  Changepoint*I(Time^4) +  Changepoint*I(Time^5),
data = spending2)
#stargazer(model6, type = "text")
summary(model6)
forecast.m6 <-exp(predict(model6,newdata=spending.test.train))
variance.m6 <- forecast.m6 - spending.test.train$Spending
spending.test.train <- data.frame(spending.test.train, forecast.m6, variance.m6)
forecast.table.6 <- spending.test.train %>%
select(1,2,4,13,17,19, 21, 14,18, 20, 22) %>%
rename("Actual Spending" = Spending,
"Model 3 Forecast" = forecast,
"Model 4 Forecast" = model4.spending.f,
"Model 5 Forecast" = forecast.m5,
"Model 6 Forecast" = forecast.m6,
"Model 3 F vs. A" = variance,
"Model 4 F vs. A" = model4.variance,
"Model 5 F vs. A" = variance.m5,
"Model 6 F vs. A" = variance.m6)
forecast.table.6 <- forecast.table.6[2:13,]
pander(forecast.table.6)
plot(x = Month, y = forecast.table.4$`Model 3 Forecast`, ylab = "Spending", main = "2019, Forecast vs. Actual", col = "red", type = "b")
lines(forecast.table.6$`Actual Spending`, col = "black", type = "b")
lines(forecast.table.6$`Model 4 Forecast`, col = "blue", type = "b")
lines(forecast.table.6$`Model 5 Forecast`, col = "purple", type = "b")
lines(forecast.table.6$`Model 6 Forecast`, col = "green", type = "b")
mse_model5 <- mean((forecast.table.6$`Model 5 F vs. A`)^2)
mse_model6 <- mean((forecast.table.6$`Model 6 F vs. A`)^2)
~/.RData
# Result lookup
library(tidyverse)
library(politicaldata)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# This is a simple tool to look up and print presidential election results
# based on year, state, and either congressional district (CD) or county.
#Loading data
pres_results_cd <- politicaldata::pres_results_by_cd
pres_results_county <- read.csv("County Level Presidential Election Results 2000-2016.csv",
stringsAsFactors = FALSE)
pres_results$state_abb <- as.factor(pres_results$state_abb)
#Cleaning county level data.
pres_results_county_clean <- pres_results_county %>%
mutate(party = replace_na(party, "other")) %>%
spread(key = party, value = candidatevotes)%>%
group_by(year, state_po, county) %>%
summarize(democrat = sum(democrat, na.rm = T),
republican = sum(republican, na.rm = T),
green = sum(green, na.rm = T),
other = sum(other, na.rm = T)) %>%
mutate(state_po = as.factor(state_po),
total = democrat + republican +green + other,
dem_share = democrat/total,
rep_share = republican/total,
abs_diff = abs(dem_share-rep_share))
#Congressional District Lookup Function
pres_cd_lookup <- function(x,y,z){
cd_result <- pres_results_cd[ which(pres_results_cd$state_abb == x &
pres_results_cd$district == y &
pres_results_cd$year == z),]
rep <- round(cd_result$rep, 4) * 100
dem <- round(cd_result$dem, 4) * 100
abs_diff <- round(abs(dem - rep),4)
paste0("In ",cd_result$year,", the Republican presidential candidate won ",
rep,"% of the vote, and the Democratic candidate won ",
dem,"% of the vote, a difference of ",abs_diff,"%.", collapse = " ")
}
#County Lookup Function
pres_county_lookup <- function(x,y,z){
county_result <- pres_results_county_clean[ which(pres_results_county_clean$state_po == x &
pres_results_county_clean$county == y &
pres_results_county_clean$year == z),]
rep <- round(county_result$rep_share, 4) * 100
dem <- round(county_result$dem_share, 4) * 100
abs_diff <- round(abs(dem - rep),4)
paste0("In ",county_result$year,", the Republican presidential candidate won ",
rep,"% of the vote, and the Democratic candidate won ",
dem,"% of the vote, a difference of ",abs_diff,"%.", collapse = " ")
}
pres_cd_lookup("NJ", "11", "2016")
pres_county_lookup("WI","Waukesha","2016")
#Cleaning county level data.
pres_results_county_clean <- pres_results_county %>%
mutate(party = replace_na(party, "other")) %>%
spread(key = party, value = candidatevotes)%>%
group_by(year, state_po, county) %>%
summarize(democrat = sum(democrat, na.rm = T),
republican = sum(republican, na.rm = T),
green = sum(green, na.rm = T),
other = sum(other, na.rm = T)) %>%
mutate(state_po = as.factor(state_po),
total = democrat + republican +green + other,
dem_share = democrat/total,
rep_share = republican/total,
abs_diff = abs(dem_share-rep_share))
#Cleaning county level data.
pres_results_county_clean <- pres_results_county %>%
mutate(party = replace_na(party, "other")) %>%
spread(key = party, value = candidatevotes)%>%
group_by(year, state_po, county) %>%
summarize(democrat = sum(democrat, na.rm = T),
republican = sum(republican, na.rm = T),
green = sum(green, na.rm = T),
other = sum(other, na.rm = T)) %>%
mutate(total = democrat + republican +green + other,
dem_share = democrat/total,
rep_share = republican/total,
abs_diff = abs(dem_share-rep_share))
#Congressional District Lookup Function
pres_cd_lookup <- function(x,y,z){
cd_result <- pres_results_cd[ which(pres_results_cd$state_abb == x &
pres_results_cd$district == y &
pres_results_cd$year == z),]
rep <- round(cd_result$rep, 4) * 100
dem <- round(cd_result$dem, 4) * 100
abs_diff <- round(abs(dem - rep),4)
paste0("In ",cd_result$year,", the Republican presidential candidate won ",
rep,"% of the vote, and the Democratic candidate won ",
dem,"% of the vote, a difference of ",abs_diff,"%.", collapse = " ")
}
#County Lookup Function
pres_county_lookup <- function(x,y,z){
county_result <- pres_results_county_clean[ which(pres_results_county_clean$state_po == x &
pres_results_county_clean$county == y &
pres_results_county_clean$year == z),]
rep <- round(county_result$rep_share, 4) * 100
dem <- round(county_result$dem_share, 4) * 100
abs_diff <- round(abs(dem - rep),4)
paste0("In ",county_result$year,", the Republican presidential candidate won ",
rep,"% of the vote, and the Democratic candidate won ",
dem,"% of the vote, a difference of ",abs_diff,"%.", collapse = " ")
}
pres_cd_lookup("NJ", "11", "2016")
pres_county_lookup("WI","Waukesha","2016")
pres_cd_lookup("NJ", "11", "2016")
pres_county_lookup("WI","Waukesha","2016")
#Package load
library(DT)
# Libraries
library(DT)
county_dt <- datatable(pres_results_county_clean, filter = 'top', options = list(
pageLength = 10, autoWidth = TRUE
))
county_dt
# Libraries
library(DT)
library(tidyverse)
library(politicaldata)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Loading data
pres_results_cd <- politicaldata::pres_results_by_cd
pres_results_county <- read.csv("County Level Presidential Election Results 2000-2016.csv",
stringsAsFactors = FALSE)
pres_results$state_abb <- as.factor(pres_results$state_abb)
# Libraries
library(DT)
library(tidyverse)
library(politicaldata)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Loading data
pres_results_cd <- politicaldata::pres_results_by_cd
pres_results_county <- read.csv("County Level Presidential Election Results 2000-2016.csv",
stringsAsFactors = FALSE)
#Cleaning county level data.
pres_results_county_clean <- pres_results_county %>%
mutate(party = replace_na(party, "other")) %>%
spread(key = party, value = candidatevotes)%>%
group_by(year, state_po, county) %>%
summarize(democrat = sum(democrat, na.rm = T),
republican = sum(republican, na.rm = T),
green = sum(green, na.rm = T),
other = sum(other, na.rm = T)) %>%
mutate(total = democrat + republican +green + other,
dem_share = democrat/total,
rep_share = republican/total,
abs_diff = abs(dem_share-rep_share)) %>%
mutate(dem_share = round(dem_share, 4),
rep_share = round(rep_share, 4),
abs_diff = round(abs_diff, 4))
View(pres_results_county_clean)
View(pres_results_county_clean)
datatable(pres_results_county_clean,
colnames = c("Year", "State", "County", "Democratic Votes",
"Republican Votes", "Green Votes", "Other Votes",
"Total Votes", "Democratic %", "Republican %", "Difference"),
filter = 'top',
options = list(pageLength = 5, autoWidth = TRUE))
